#!/bin/bash

#   This file is part of Winry-Tools - <http://github.com/winry-linux/winry-tools>
#
#   Copyright 2017, Joshua Strot <joshua@winrylinux.org>
#
#   Winry-Tools is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   Winry-Tools is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with Winry-Tools. If not, see <http://www.gnu.org/licenses/>.

export LC_MESSAGES=C
export LANG=C

#Define variables here so can be later set to readonly
declare ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''

if [[ -t 2 ]]; then
    # prefer terminal safe colored and bold text when tput is supported
    if tput setaf 0 &>/dev/null; then
        ALL_OFF="$(tput sgr0)"
        BOLD="$(tput bold)"
        RED="${BOLD}$(tput setaf 1)"
        GREEN="${BOLD}$(tput setaf 2)"
        YELLOW="${BOLD}$(tput setaf 3)"
        BLUE="${BOLD}$(tput setaf 4)"
    else
        ALL_OFF="\e[0m"
        BOLD="\e[1m"
        RED="${BOLD}\e[31m"
        GREEN="${BOLD}\e[32m"
        YELLOW="${BOLD}\e[33m"
        BLUE="${BOLD}\e[34m"
    fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW

#Plain text, only bold no color
plain() {
    local mesg=$1; shift
    printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

#Used for generic program output, everything alright
msg() {
    local mesg=$1; shift
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

#Child output of generic output, everything still alright
msg2() {
    local mesg=$1; shift
    printf "${BLUE}    -->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

#Child output of generic output, but an unexpected event occurred
info() {
    local mesg=$1; shift
    printf "${YELLOW}    -->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

#Output that a non critical error occurred, but the program will continue
warning() {
    local mesg=$1; shift
    printf "${YELLOW}==> WARNING:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

#Output an error message, critical and the program will likely exit
error() {
    local mesg=$1; shift
    printf "${RED}==> ERROR:${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

header() {
    printf "${BOLD}"
    printf "   __        ___                      _____           _         \n"
    printf "   \ \      / (_)_ __  _ __ _   _    |_   _|__   ___ | |___     \n"
    printf "    \ \ /\ / /| | '_ \| '__| | | |_____| |/ _ \ / _ \| / __|    \n"
    printf "     \ V  V / | | | | | |  | |_| |_____| | (_) | (_) | \__ \    \n"
    printf "      \_/\_/  |_|_| |_|_|   \__, |     |_|\___/ \___/|_|___/    \n"
    printf "                            |___/                               \n"
    printf "\n"
    printf "${ALL_OFF}"
}

#Exit with an error code, or 0
cleanup() {
    exit ${1:-0}
}

#Exit, error code 1
abort() {
    error 'Aborting...'
    cleanup 1
}

#Wrapper to either exit with custom error code, or with just 1
die() {
    (( $# )) && error "$@"
    cleanup 1
}
